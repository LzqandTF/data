<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/jee 
	http://www.springframework.org/schema/jee/spring-jee-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-lazy-init="true">

	<description>Spring公共配置文件 </description>

	<!-- 定义易受环境影响的变量 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath*:/application.properties</value>
			</list>
		</property>
	</bean>

	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="com.chinaebi"/>

	<bean id="writeDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.userDS.username}" />
		<property name="password" value="${jdbc.userDS.password}" />
		<!-- 连接池中保留的最小连接数    -->
		<property name="minPoolSize" value="1" />
		<!-- 连接池中保留的最大连接数    -->
		<property name="maxPoolSize" value="200" />
		<!-- 最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0-->
		<property name="maxIdleTime" value="1800" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3-->
		<property name="acquireIncrement" value="5" />
		<!-- 最大的PreparedStatement的数量    -->
		<property name="maxStatements" value="1000" />
		<!-- 每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30-->
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>
	
	<bean id="readDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName2}" />
		<property name="jdbcUrl" value="${jdbc.url2}" />
		<property name="user" value="${jdbc.userDS.username2}" />
		<property name="password" value="${jdbc.userDS.password2}" />
		<!-- 连接池中保留的最小连接数    -->
		<property name="minPoolSize" value="1" />
		<!-- 连接池中保留的最大连接数    -->
		<property name="maxPoolSize" value="200" />
		<!-- 最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0-->
		<property name="maxIdleTime" value="1800" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3-->
		<property name="acquireIncrement" value="5" />
		<!-- 最大的PreparedStatement的数量    -->
		<property name="maxStatements" value="1000" />
		<!-- 每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30-->
		<property name="acquireRetryAttempts" value="30" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>
	
	<bean id="dataSource" class="com.chinaebi.utils.spring.CustomerRoutingDataSource">  
        <property name="targetDataSources">  
             <map key-type="java.lang.String">  
               <entry key="writeDataSource" value-ref="writeDataSource" />  
               <entry key="readDataSource" value-ref="readDataSource" />  
            </map>  
        </property>  
       <property name="defaultTargetDataSource" ref="writeDataSource" />  
   </bean>  


	<!-- log4jdbc可以将数据源执行的sql将占位符?替换成字符,并以日志打印出来. log4j配置: log4j.logger.jdbc.sqltiming=INFO    详情请看: http://code.google.com/p/rapid-framework/wiki/log4jdbc
	如oracle示例: 
		原来的sql: select * from user where birth_date = ? and username = ? and age > ?
		转换后sql: select * from user where birth_date = to_date('2010-08-13','yyyy-mm-dd') and username = 'badqiu' and age > 20
	 
	<bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
    <bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
       <property name="interceptorNames">
           <list>
              <value>log4jdbcInterceptor</value>        
           </list>
       </property>
       <property name="beanNames">
           <list>
              <value>dataSource</value>
           </list>
       </property>
    </bean>
    -->
	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mapper/Configuration.xml" />
		<property name="mapperLocations" value="classpath:/mapper/*Mapper.xml" />
	</bean>

	<!-- 事务管理器配置, 使用jdbc事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="modify*" propagation="REQUIRED"/>
			<tx:method name="del*" propagation="REQUIRED"/>
			<tx:method name="proce*" propagation="REQUIRED"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	
	<aop:config proxy-target-class="true">
		<aop:pointcut id="allServiceMethod" expression="execution(public * com.chinaebi.serviceImpl.*.*(..))"/>
		<aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice"/>
	</aop:config>
	<!-- 使用annotation定义事务
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
 	-->
</beans>